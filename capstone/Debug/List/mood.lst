
AVRASM ver. 2.1.30  C:\Users\hyunm\Desktop\수업\3-1\마이크로프로세서(캡스톤디자인)\마이크로 캡스톤\capstone\Debug\List\mood.asm Mon Jun 07 01:11:01 2021

C:\Users\hyunm\Desktop\수업\3-1\마이크로프로세서(캡스톤디자인)\마이크로 캡스톤\capstone\Debug\List\mood.asm(1097): warning: Register r5 already defined by the .DEF directive
C:\Users\hyunm\Desktop\수업\3-1\마이크로프로세서(캡스톤디자인)\마이크로 캡스톤\capstone\Debug\List\mood.asm(1098): warning: Register r4 already defined by the .DEF directive
C:\Users\hyunm\Desktop\수업\3-1\마이크로프로세서(캡스톤디자인)\마이크로 캡스톤\capstone\Debug\List\mood.asm(1099): warning: Register r6 already defined by the .DEF directive
C:\Users\hyunm\Desktop\수업\3-1\마이크로프로세서(캡스톤디자인)\마이크로 캡스톤\capstone\Debug\List\mood.asm(1100): warning: Register r7 already defined by the .DEF directive
C:\Users\hyunm\Desktop\수업\3-1\마이크로프로세서(캡스톤디자인)\마이크로 캡스톤\capstone\Debug\List\mood.asm(1101): warning: Register r8 already defined by the .DEF directive
C:\Users\hyunm\Desktop\수업\3-1\마이크로프로세서(캡스톤디자인)\마이크로 캡스톤\capstone\Debug\List\mood.asm(1102): warning: Register r9 already defined by the .DEF directive
C:\Users\hyunm\Desktop\수업\3-1\마이크로프로세서(캡스톤디자인)\마이크로 캡스톤\capstone\Debug\List\mood.asm(1103): warning: Register r10 already defined by the .DEF directive
C:\Users\hyunm\Desktop\수업\3-1\마이크로프로세서(캡스톤디자인)\마이크로 캡스톤\capstone\Debug\List\mood.asm(1104): warning: Register r11 already defined by the .DEF directive
C:\Users\hyunm\Desktop\수업\3-1\마이크로프로세서(캡스톤디자인)\마이크로 캡스톤\capstone\Debug\List\mood.asm(1105): warning: Register r13 already defined by the .DEF directive
C:\Users\hyunm\Desktop\수업\3-1\마이크로프로세서(캡스톤디자인)\마이크로 캡스톤\capstone\Debug\List\mood.asm(1106): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.28 Evaluation
                 ;(C) Copyright 1998-2016 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _EDITCURSOR=R5
                 	.DEF _mood=R4
                 	.DEF _duty1=R6
                 	.DEF _duty1_msb=R7
                 	.DEF _duty2=R8
                 	.DEF _duty2_msb=R9
                 	.DEF _duty3=R10
                 	.DEF _duty3_msb=R11
                 	.DEF _hour=R13
                 	.DEF __min=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0082 	JMP  __RESET
000002 940c 00ff 	JMP  _external_int0
000004 940c 0120 	JMP  _external_int1
000006 940c 016b 	JMP  _external_int2
000008 940c 01b6 	JMP  _external_int3
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 00d8 	JMP  _timer1_compa_isr
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00004f 8e00
000050 0000      	.DB  0x0,0x8E,0x0,0x0
000051 0000
000052 0000      	.DB  0x0,0x0,0x0,0x0
000053 0000      	.DB  0x0,0x0
                 
                 _0x0:
000054 4d20
000055 6369
000056 6f72
000057 7270      	.DB  0x20,0x4D,0x69,0x63,0x72,0x6F,0x70,0x72
000058 636f
000059 7365
00005a 6f73
00005b 0072      	.DB  0x6F,0x63,0x65,0x73,0x73,0x6F,0x72,0x0
00005c 6445
00005d 7469
00005e 6e69
00005f 2e67      	.DB  0x45,0x64,0x69,0x74,0x69,0x6E,0x67,0x2E
000060 2e2e
000061 2020
000062 2020
000063 2020      	.DB  0x2E,0x2E,0x20,0x20,0x20,0x20,0x20,0x20
000064 0020
000065 545b
000066 4d49
000067 5d45      	.DB  0x20,0x0,0x5B,0x54,0x49,0x4D,0x45,0x5D
000068 255b
000069 6432
00006a 253a
00006b 6432      	.DB  0x5B,0x25,0x32,0x64,0x3A,0x25,0x32,0x64
00006c 253a
00006d 6432
00006e 005d      	.DB  0x3A,0x25,0x32,0x64,0x5D,0x0
                 _0x2040060:
C:\Users\hyunm\Desktop\수업\3-1\마이크로프로세서(캡스톤디자인)\마이크로 캡스톤\capstone\Debug\List\mood.asm(1172): warning: .cseg .db misalignment - padding zero byte
00006f 0001      	.DB  0x1
                 _0x2040000:
000070 4e2d
000071 4e41
000072 4900
000073 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\hyunm\Desktop\수업\3-1\마이크로프로세서(캡스톤디자인)\마이크로 캡스톤\capstone\Debug\List\mood.asm(1175): warning: .cseg .db misalignment - padding zero byte
000074 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000075 000a      	.DW  0x0A
000076 0004      	.DW  0x04
000077 009e      	.DW  __REG_VARS*2
                 
000078 0010      	.DW  0x10
000079 0500      	.DW  _0x14
00007a 00a8      	.DW  _0x0*2
                 
00007b 0012      	.DW  0x12
00007c 0510      	.DW  _0x16
00007d 00b8      	.DW  _0x0*2+16
                 
00007e 0001      	.DW  0x01
00007f 0539      	.DW  __seed_G102
000080 00de      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
000081 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000082 94f8      	CLI
000083 27ee      	CLR  R30
000084 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000085 e0f1      	LDI  R31,1
000086 bff5      	OUT  MCUCR,R31
000087 bfe5      	OUT  MCUCR,R30
000088 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
00008a e08d      	LDI  R24,(14-2)+1
00008b e0a2      	LDI  R26,2
00008c 27bb      	CLR  R27
                 __CLEAR_REG:
00008d 93ed      	ST   X+,R30
00008e 958a      	DEC  R24
00008f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000090 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000091 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000092 e0a0      	LDI  R26,LOW(__SRAM_START)
000093 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000094 93ed      	ST   X+,R30
000095 9701      	SBIW R24,1
000096 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000097 eeea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000098 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000099 9185      	LPM  R24,Z+
00009a 9195      	LPM  R25,Z+
00009b 9700      	SBIW R24,0
00009c f061      	BREQ __GLOBAL_INI_END
00009d 91a5      	LPM  R26,Z+
00009e 91b5      	LPM  R27,Z+
00009f 9005      	LPM  R0,Z+
0000a0 9015      	LPM  R1,Z+
0000a1 01bf      	MOVW R22,R30
0000a2 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000a3 9005      	LPM  R0,Z+
0000a4 920d      	ST   X+,R0
0000a5 9701      	SBIW R24,1
0000a6 f7e1      	BRNE __GLOBAL_INI_LOOP
0000a7 01fb      	MOVW R30,R22
0000a8 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0000a9 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000aa efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000ab bfed      	OUT  SPL,R30
0000ac e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000ad bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000ae e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000af e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000b0 940c 00b2 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;// 마이크로프로세서
                 ;// UV살균 무선 충전 시계 무드등
                 ;
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <string.h>
                 ;#include <stdlib.h>
                 ;#include <delay.h>
                 ;
                 ;#define FUNCSET 0x28 //Function Set
                 ;#define ENTMODE 0x06 // Entry Mode Set
                 ;#define ALLCLR 0x01 // All Clear
                 ;#define DISPON 0x0c // Display On
                 ;#define DISPOFF 0x08 // Display Off
                 ;#define BLINKON 0x0F // Display On & Cursor On & Cursor Blink on
                 ;#define BLINKOFF 0x0C // Display On & Cursor Off & Cursor Blink off
                 ;#define LINE2 0xC0 // 2nd Line Move 1110 0000
                 ;#define HOME 0x02 // Cursor Home
                 ;#define RSHIFT 0x1C // Display Right Shift
                 ;
                 ;#define nop2 {#asm("nop"); #asm("nop");}
                 ;#define nop8 {nop2; nop2; nop2; nop2;}
                 ;#define ws2812b PORTB.7
                 ;
                 ;char EDITCURSOR = 0x8E; // Editting Cursor
                 ;char mood = 0; // Mood Light On/Off & Color change
                 ;int duty1 = 0, duty2 = 0, duty3 = 0; // Mood Light RGB Value
                 ;char hour=0, _min=0, sec=0, mSec=0, loc=0;
                 ;char buf[20];
                 ;
                 ;void byte_out(char d);
                 ;void LCD_init(void); //LCD 초기화
                 ;void LCD_String(char *); // 문자열 출력 함수
                 ;void Busy(void);
                 ;void Command(unsigned char); //인스트럭션 쓰기 함수
                 ;void Data(unsigned char); //데이터 쓰기 함수
                 ;void time_display(void);
                 ;void edit_cursor(void);
                 ;
                 ;void main(void)
                 ; 0000 0029 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 002A     char i = 0;
                 ; 0000 002B 
                 ; 0000 002C     DDRB.7 = 1;
                 ;	i -> R17
0000b2 e010      	LDI  R17,0
0000b3 9abf      	SBI  0x17,7
                 ; 0000 002D     DDRC.7 = 1;
0000b4 9aa7      	SBI  0x14,7
                 ; 0000 002E 
                 ; 0000 002F     PORTC.7 = 0;
0000b5 98af      	CBI  0x15,7
                 ; 0000 0030 
                 ; 0000 0031     //인터럽트
                 ; 0000 0032     DDRD = 0x00;
0000b6 e0e0      	LDI  R30,LOW(0)
0000b7 bbe1      	OUT  0x11,R30
                 ; 0000 0033     EIMSK = 0b00001111;
0000b8 e0ef      	LDI  R30,LOW(15)
0000b9 bfe9      	OUT  0x39,R30
                 ; 0000 0034     EICRA = 0b10101010;
0000ba eaea      	LDI  R30,LOW(170)
0000bb 93e0 006a 	STS  106,R30
                 ; 0000 0035     TCCR1B=0x0C; OCR1A=6249; TIMSK=0x10; //16000000/256/(1+6249)=10Hz=0.1sec // A매치
0000bd e0ec      	LDI  R30,LOW(12)
0000be bdee      	OUT  0x2E,R30
0000bf e6e9      	LDI  R30,LOW(6249)
0000c0 e1f8      	LDI  R31,HIGH(6249)
0000c1 bdfb      	OUT  0x2A+1,R31
0000c2 bdea      	OUT  0x2A,R30
0000c3 e1e0      	LDI  R30,LOW(16)
0000c4 bfe7      	OUT  0x37,R30
                 ; 0000 0036     SREG = 0b10000000;
0000c5 e8e0      	LDI  R30,LOW(128)
0000c6 bfef      	OUT  0x3F,R30
                 ; 0000 0037 
                 ; 0000 0038     LCD_init();
0000c7 d154      	RCALL _LCD_init
                 ; 0000 0039 
                 ; 0000 003A     while(1)
                 _0x9:
                 ; 0000 003B     {
                 ; 0000 003C         for(i=0;i<8;i++){  //8개의 LED에 차례대로 값을 줌
0000c8 e010      	LDI  R17,LOW(0)
                 _0xD:
0000c9 3018      	CPI  R17,8
0000ca f440      	BRSH _0xE
                 ; 0000 003D             byte_out(duty1); //G
0000cb 2da6      	MOV  R26,R6
0000cc d0ef      	RCALL _byte_out
                 ; 0000 003E             byte_out(duty2); //R
0000cd 2da8      	MOV  R26,R8
0000ce d0ed      	RCALL _byte_out
                 ; 0000 003F             byte_out(duty3); //B
0000cf 2daa      	MOV  R26,R10
0000d0 d0eb      	RCALL _byte_out
                 ; 0000 0040         }
0000d1 5f1f      	SUBI R17,-1
0000d2 cff6      	RJMP _0xD
                 _0xE:
                 ; 0000 0041         delay_ms(5);
0000d3 e0a5      	LDI  R26,LOW(5)
0000d4 e0b0      	LDI  R27,0
0000d5 d3a1      	RCALL _delay_ms
                 ; 0000 0042     }
0000d6 cff1      	RJMP _0x9
                 ; 0000 0043 }
                 _0xF:
0000d7 cfff      	RJMP _0xF
                 ; .FEND
                 ;
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ; 0000 0046 {
                 _timer1_compa_isr:
                 ; .FSTART _timer1_compa_isr
0000d8 d31d      	RCALL SUBOPT_0x0
                 ; 0000 0047     mSec++;
0000d9 91e0 0523 	LDS  R30,_mSec
0000db 5fef      	SUBI R30,-LOW(1)
0000dc 93e0 0523 	STS  _mSec,R30
                 ; 0000 0048     if(mSec> 9)
0000de 91a0 0523 	LDS  R26,_mSec
0000e0 30aa      	CPI  R26,LOW(0xA)
0000e1 f0b0      	BRLO _0x10
                 ; 0000 0049     {
                 ; 0000 004A         mSec=0;
0000e2 e0e0      	LDI  R30,LOW(0)
0000e3 93e0 0523 	STS  _mSec,R30
                 ; 0000 004B         if(++sec >59)
0000e5 91a0 0522 	LDS  R26,_sec
0000e7 5faf      	SUBI R26,-LOW(1)
0000e8 93a0 0522 	STS  _sec,R26
0000ea 33ac      	CPI  R26,LOW(0x3C)
0000eb f060      	BRLO _0x11
                 ; 0000 004C         {
                 ; 0000 004D             sec=0;
0000ec 93e0 0522 	STS  _sec,R30
                 ; 0000 004E             if(++_min >59)
0000ee 94c3      	INC  R12
0000ef e3eb      	LDI  R30,LOW(59)
0000f0 15ec      	CP   R30,R12
0000f1 f430      	BRSH _0x12
                 ; 0000 004F             {
                 ; 0000 0050                 _min=0;
0000f2 24cc      	CLR  R12
                 ; 0000 0051                 if(++hour>23) hour=0;
0000f3 94d3      	INC  R13
0000f4 e1e7      	LDI  R30,LOW(23)
0000f5 15ed      	CP   R30,R13
0000f6 f408      	BRSH _0x13
0000f7 24dd      	CLR  R13
                 ; 0000 0052             }
                 _0x13:
                 ; 0000 0053         }
                 _0x12:
                 ; 0000 0054     }
                 _0x11:
                 ; 0000 0055     time_display();
                 _0x10:
0000f8 d0df      	RCALL _time_display
                 ; 0000 0056     Command(LINE2);
0000f9 eca0      	LDI  R26,LOW(192)
0000fa d148      	RCALL _Command
                 ; 0000 0057     LCD_String(" Microprocessor");
                +
0000fb e0a0     +LDI R26 , LOW ( _0x14 + ( 0 ) )
0000fc e0b5     +LDI R27 , HIGH ( _0x14 + ( 0 ) )
                 	__POINTW2MN _0x14,0
0000fd d134      	RCALL _LCD_String
                 ; 0000 0058 }
0000fe c05e      	RJMP _0x48
                 ; .FEND
                 
                 	.DSEG
                 _0x14:
000500           	.BYTE 0x10
                 ;
                 ;//시계 시간 조정1
                 ;interrupt [EXT_INT0] void external_int0(void)
                 ; 0000 005C {
                 
                 	.CSEG
                 _external_int0:
                 ; .FSTART _external_int0
0000ff d2f6      	RCALL SUBOPT_0x0
                 ; 0000 005D     if(loc == 0)
000100 91e0 0524 	LDS  R30,_loc
000102 30e0      	CPI  R30,0
000103 f429      	BRNE _0x15
                 ; 0000 005E     {
                 ; 0000 005F         Command(LINE2);
000104 eca0      	LDI  R26,LOW(192)
000105 d13d      	RCALL _Command
                 ; 0000 0060         LCD_String("Editing...       ");
                +
000106 e1a0     +LDI R26 , LOW ( _0x16 + ( 0 ) )
000107 e0b5     +LDI R27 , HIGH ( _0x16 + ( 0 ) )
                 	__POINTW2MN _0x16,0
000108 d129      	RCALL _LCD_String
                 ; 0000 0061     }
                 ; 0000 0062     TIMSK = 0b00000000; //시간 조절중에는 시계를 멈춤
                 _0x15:
000109 e0e0      	LDI  R30,LOW(0)
00010a bfe7      	OUT  0x37,R30
                 ; 0000 0063     loc++;
00010b 91e0 0524 	LDS  R30,_loc
00010d 5fef      	SUBI R30,-LOW(1)
00010e 93e0 0524 	STS  _loc,R30
                 ; 0000 0064     edit_cursor();
000110 d0df      	RCALL _edit_cursor
                 ; 0000 0065     if(loc == 7)
000111 91a0 0524 	LDS  R26,_loc
000113 30a7      	CPI  R26,LOW(0x7)
000114 f451      	BRNE _0x17
                 ; 0000 0066     {
                 ; 0000 0067         loc=0;
000115 e0e0      	LDI  R30,LOW(0)
000116 93e0 0524 	STS  _loc,R30
                 ; 0000 0068         Command(ALLCLR);
000118 e0a1      	LDI  R26,LOW(1)
000119 d129      	RCALL _Command
                 ; 0000 0069         Command(BLINKOFF);
00011a e0ac      	LDI  R26,LOW(12)
00011b d127      	RCALL _Command
                 ; 0000 006A         time_display();
00011c d0bb      	RCALL _time_display
                 ; 0000 006B         TIMSK=0x10;
00011d e1e0      	LDI  R30,LOW(16)
00011e bfe7      	OUT  0x37,R30
                 ; 0000 006C     }
                 ; 0000 006D }
                 _0x17:
00011f c03d      	RJMP _0x48
                 ; .FEND
                 
                 	.DSEG
                 _0x16:
000510           	.BYTE 0x12
                 ;
                 ;//시계 시간 조정2
                 ;interrupt [EXT_INT1] void external_int1(void)
                 ; 0000 0071 {
                 
                 	.CSEG
                 _external_int1:
                 ; .FSTART _external_int1
000120 d2d5      	RCALL SUBOPT_0x0
                 ; 0000 0072     if(TIMSK == 0b00000000)
000121 b7e7      	IN   R30,0x37
000122 30e0      	CPI  R30,0
000123 f5c9      	BRNE _0x18
                 ; 0000 0073     {
                 ; 0000 0074         if(loc == 1) sec++;
000124 91a0 0524 	LDS  R26,_loc
000126 30a1      	CPI  R26,LOW(0x1)
000127 f429      	BRNE _0x19
000128 91e0 0522 	LDS  R30,_sec
00012a 5fef      	SUBI R30,-LOW(1)
00012b 93e0 0522 	STS  _sec,R30
                 ; 0000 0075         if(loc == 2) sec += 10;
                 _0x19:
00012d 91a0 0524 	LDS  R26,_loc
00012f 30a2      	CPI  R26,LOW(0x2)
000130 f429      	BRNE _0x1A
000131 91e0 0522 	LDS  R30,_sec
000133 5fe6      	SUBI R30,-LOW(10)
000134 93e0 0522 	STS  _sec,R30
                 ; 0000 0076         if(loc == 3) _min++;
                 _0x1A:
000136 91a0 0524 	LDS  R26,_loc
000138 30a3      	CPI  R26,LOW(0x3)
000139 f409      	BRNE _0x1B
00013a 94c3      	INC  R12
                 ; 0000 0077         if(loc == 4) _min += 10;
                 _0x1B:
00013b 91a0 0524 	LDS  R26,_loc
00013d 30a4      	CPI  R26,LOW(0x4)
00013e f411      	BRNE _0x1C
00013f e0ea      	LDI  R30,LOW(10)
000140 0ece      	ADD  R12,R30
                 ; 0000 0078         if(loc == 5) hour++;
                 _0x1C:
000141 91a0 0524 	LDS  R26,_loc
000143 30a5      	CPI  R26,LOW(0x5)
000144 f409      	BRNE _0x1D
000145 94d3      	INC  R13
                 ; 0000 0079         if(loc == 6) hour += 10;
                 _0x1D:
000146 91a0 0524 	LDS  R26,_loc
000148 30a6      	CPI  R26,LOW(0x6)
000149 f411      	BRNE _0x1E
00014a e0ea      	LDI  R30,LOW(10)
00014b 0ede      	ADD  R13,R30
                 ; 0000 007A         if(sec > 59) sec = 0;
                 _0x1E:
00014c 91a0 0522 	LDS  R26,_sec
00014e 33ac      	CPI  R26,LOW(0x3C)
00014f f018      	BRLO _0x1F
000150 e0e0      	LDI  R30,LOW(0)
000151 93e0 0522 	STS  _sec,R30
                 ; 0000 007B         if(_min > 59) _min = 0;
                 _0x1F:
000153 e3eb      	LDI  R30,LOW(59)
000154 15ec      	CP   R30,R12
000155 f408      	BRSH _0x20
000156 24cc      	CLR  R12
                 ; 0000 007C         if(hour > 24) hour = 0;
                 _0x20:
000157 e1e8      	LDI  R30,LOW(24)
000158 15ed      	CP   R30,R13
000159 f408      	BRSH _0x21
00015a 24dd      	CLR  R13
                 ; 0000 007D         time_display();
                 _0x21:
00015b d07c      	RCALL _time_display
                 ; 0000 007E         edit_cursor();
00015c d093      	RCALL _edit_cursor
                 ; 0000 007F     }
                 ; 0000 0080 }
                 _0x18:
                 _0x48:
00015d 91e9      	LD   R30,Y+
00015e bfef      	OUT  SREG,R30
00015f 91f9      	LD   R31,Y+
000160 91e9      	LD   R30,Y+
000161 91b9      	LD   R27,Y+
000162 91a9      	LD   R26,Y+
000163 9199      	LD   R25,Y+
000164 9189      	LD   R24,Y+
000165 9179      	LD   R23,Y+
000166 9169      	LD   R22,Y+
000167 90f9      	LD   R15,Y+
000168 9019      	LD   R1,Y+
000169 9009      	LD   R0,Y+
00016a 9518      	RETI
                 ; .FEND
                 ;
                 ;//RGB LED (Mood Light)
                 ;interrupt [EXT_INT2] void external_int2(void)
                 ; 0000 0084 {
                 _external_int2:
                 ; .FSTART _external_int2
00016b 93ea      	ST   -Y,R30
00016c 93fa      	ST   -Y,R31
00016d b7ef      	IN   R30,SREG
00016e 93ea      	ST   -Y,R30
                 ; 0000 0085     mood++;
00016f 9443      	INC  R4
                 ; 0000 0086     if(mood == 1) { // Default Light
000170 e0e1      	LDI  R30,LOW(1)
000171 15e4      	CP   R30,R4
000172 f429      	BRNE _0x22
                 ; 0000 0087         duty1 = 100; //G
000173 e6e4      	LDI  R30,LOW(100)
000174 e0f0      	LDI  R31,HIGH(100)
000175 013f      	MOVW R6,R30
                 ; 0000 0088         duty2 = 255; //R
000176 d28d      	RCALL SUBOPT_0x1
                 ; 0000 0089         duty3 = 0; //B
                 ; 0000 008A     }
                 ; 0000 008B     else if(mood == 2) { // RED
000177 c039      	RJMP _0x23
                 _0x22:
000178 e0e2      	LDI  R30,LOW(2)
000179 15e4      	CP   R30,R4
00017a f421      	BRNE _0x24
                 ; 0000 008C         duty1 = 0; //G
00017b 2466      	CLR  R6
00017c 2477      	CLR  R7
                 ; 0000 008D         duty2 = 255; //R
00017d d286      	RCALL SUBOPT_0x1
                 ; 0000 008E         duty3 = 0; //B
                 ; 0000 008F     }
                 ; 0000 0090     else if(mood == 3) { // GREEN
00017e c032      	RJMP _0x25
                 _0x24:
00017f e0e3      	LDI  R30,LOW(3)
000180 15e4      	CP   R30,R4
000181 f429      	BRNE _0x26
                 ; 0000 0091         duty1 = 255; //G
000182 efef      	LDI  R30,LOW(255)
000183 e0f0      	LDI  R31,HIGH(255)
000184 013f      	MOVW R6,R30
                 ; 0000 0092         duty2 = 0; //R
000185 d284      	RCALL SUBOPT_0x2
                 ; 0000 0093         duty3 = 0; //B
                 ; 0000 0094     }
                 ; 0000 0095     else if(mood == 4) { // BLUE
000186 c02a      	RJMP _0x27
                 _0x26:
000187 e0e4      	LDI  R30,LOW(4)
000188 15e4      	CP   R30,R4
000189 f441      	BRNE _0x28
                 ; 0000 0096         duty1 = 0; //G
00018a 2466      	CLR  R6
00018b 2477      	CLR  R7
                 ; 0000 0097         duty2 = 0; //R
00018c 2488      	CLR  R8
00018d 2499      	CLR  R9
                 ; 0000 0098         duty3 = 255; //B
00018e efef      	LDI  R30,LOW(255)
00018f e0f0      	LDI  R31,HIGH(255)
000190 015f      	MOVW R10,R30
                 ; 0000 0099     }
                 ; 0000 009A     else if(mood == 5) { // PURPLE
000191 c01f      	RJMP _0x29
                 _0x28:
000192 e0e5      	LDI  R30,LOW(5)
000193 15e4      	CP   R30,R4
000194 f449      	BRNE _0x2A
                 ; 0000 009B         duty1 = 0; //G
000195 2466      	CLR  R6
000196 2477      	CLR  R7
                 ; 0000 009C         duty2 = 95; //R
000197 e5ef      	LDI  R30,LOW(95)
000198 e0f0      	LDI  R31,HIGH(95)
000199 014f      	MOVW R8,R30
                 ; 0000 009D         duty3 = 255; //B
00019a efef      	LDI  R30,LOW(255)
00019b e0f0      	LDI  R31,HIGH(255)
00019c 015f      	MOVW R10,R30
                 ; 0000 009E     }
                 ; 0000 009F     else if(mood == 6) { // PINK
00019d c013      	RJMP _0x2B
                 _0x2A:
00019e e0e6      	LDI  R30,LOW(6)
00019f 15e4      	CP   R30,R4
0001a0 f449      	BRNE _0x2C
                 ; 0000 00A0         duty1 = 0; //G
0001a1 2466      	CLR  R6
0001a2 2477      	CLR  R7
                 ; 0000 00A1         duty2 = 255; //R
0001a3 efef      	LDI  R30,LOW(255)
0001a4 e0f0      	LDI  R31,HIGH(255)
0001a5 014f      	MOVW R8,R30
                 ; 0000 00A2         duty3 = 221; //B
0001a6 eded      	LDI  R30,LOW(221)
0001a7 e0f0      	LDI  R31,HIGH(221)
0001a8 015f      	MOVW R10,R30
                 ; 0000 00A3     }
                 ; 0000 00A4     else if(mood == 7) {
0001a9 c007      	RJMP _0x2D
                 _0x2C:
0001aa e0e7      	LDI  R30,LOW(7)
0001ab 15e4      	CP   R30,R4
0001ac f421      	BRNE _0x2E
                 ; 0000 00A5         duty1 = 0; //G
0001ad 2466      	CLR  R6
0001ae 2477      	CLR  R7
                 ; 0000 00A6         duty2 = 0; //R
0001af d25a      	RCALL SUBOPT_0x2
                 ; 0000 00A7         duty3 = 0; //B
                 ; 0000 00A8         mood = 0;
0001b0 2444      	CLR  R4
                 ; 0000 00A9     }
                 ; 0000 00AA }
                 _0x2E:
                 _0x2D:
                 _0x2B:
                 _0x29:
                 _0x27:
                 _0x25:
                 _0x23:
0001b1 91e9      	LD   R30,Y+
0001b2 bfef      	OUT  SREG,R30
0001b3 91f9      	LD   R31,Y+
0001b4 91e9      	LD   R30,Y+
0001b5 9518      	RETI
                 ; .FEND
                 ;
                 ;//UV LED 전원 ON OFF
                 ;interrupt [EXT_INT3] void external_int3(void)
                 ; 0000 00AE {
                 _external_int3:
                 ; .FSTART _external_int3
                 ; 0000 00AF     PORTC.7 = !PORTC.7;
0001b6 9baf      	SBIS 0x15,7
0001b7 c002      	RJMP _0x2F
0001b8 98af      	CBI  0x15,7
0001b9 c001      	RJMP _0x30
                 _0x2F:
0001ba 9aaf      	SBI  0x15,7
                 _0x30:
                 ; 0000 00B0 }
0001bb 9518      	RETI
                 ; .FEND
                 ;
                 ;//RGB LED
                 ;void byte_out(char d)
                 ; 0000 00B4 {
                 _byte_out:
                 ; .FSTART _byte_out
                 ; 0000 00B5     char i;
                 ; 0000 00B6     for(i=0;i<8;i++){
0001bc 931a      	ST   -Y,R17
0001bd 930a      	ST   -Y,R16
0001be 2f0a      	MOV  R16,R26
                 ;	d -> R16
                 ;	i -> R17
0001bf e010      	LDI  R17,LOW(0)
                 _0x32:
0001c0 3018      	CPI  R17,8
0001c1 f498      	BRSH _0x33
                 ; 0000 00B7         if(d&0x80){ ws2812b=1; nop8; ws2812b=0; }
0001c2 ff07      	SBRS R16,7
0001c3 c00a      	RJMP _0x34
0001c4 9ac7      	SBI  0x18,7
0001c5 0000      	NOP
0001c6 0000      	NOP
0001c7 0000      	NOP
0001c8 0000      	NOP
0001c9 0000      	NOP
0001ca 0000      	NOP
0001cb 0000      	NOP
0001cc 0000      	NOP
0001cd c003      	RJMP _0x47
                 ; 0000 00B8         else      { ws2812b=1; nop2; ws2812b=0; }
                 _0x34:
0001ce 9ac7      	SBI  0x18,7
0001cf 0000      	NOP
0001d0 0000      	NOP
                 _0x47:
0001d1 98c7      	CBI  0x18,7
                 ; 0000 00B9         d<<=1;  // 비트연산자
0001d2 0f00      	LSL  R16
                 ; 0000 00BA     }
0001d3 5f1f      	SUBI R17,-1
0001d4 cfeb      	RJMP _0x32
                 _0x33:
                 ; 0000 00BB }
0001d5 9109      	LD   R16,Y+
0001d6 9119      	LD   R17,Y+
0001d7 9508      	RET
                 ; .FEND
                 ;
                 ;// 시간 출력
                 ;void time_display(void)
                 ; 0000 00BF {
                 _time_display:
                 ; .FSTART _time_display
                 ; 0000 00C0     Command(HOME);
0001d8 e0a2      	LDI  R26,LOW(2)
0001d9 d069      	RCALL _Command
                 ; 0000 00C1     sprintf(buf,"[TIME][%2d:%2d:%2d]", hour, _min, sec);
0001da e2e5      	LDI  R30,LOW(_buf)
0001db e0f5      	LDI  R31,HIGH(_buf)
0001dc 93fa      	ST   -Y,R31
0001dd 93ea      	ST   -Y,R30
                +
0001de ecea     +LDI R30 , LOW ( 2 * _0x0 + ( 34 ) )
0001df e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 34 ) )
                 	__POINTW1FN _0x0,34
0001e0 93fa      	ST   -Y,R31
0001e1 93ea      	ST   -Y,R30
0001e2 2ded      	MOV  R30,R13
0001e3 d22b      	RCALL SUBOPT_0x3
0001e4 2dec      	MOV  R30,R12
0001e5 d229      	RCALL SUBOPT_0x3
0001e6 91e0 0522 	LDS  R30,_sec
0001e8 d226      	RCALL SUBOPT_0x3
0001e9 e08c      	LDI  R24,12
0001ea d1c1      	RCALL _sprintf
0001eb 9660      	ADIW R28,16
                 ; 0000 00C2     LCD_String(buf);
0001ec e2a5      	LDI  R26,LOW(_buf)
0001ed e0b5      	LDI  R27,HIGH(_buf)
0001ee d043      	RCALL _LCD_String
                 ; 0000 00C3 }
0001ef 9508      	RET
                 ; .FEND
                 ;
                 ;// Editting 커서 표시
                 ;void edit_cursor(void)
                 ; 0000 00C7 {
                 _edit_cursor:
                 ; .FSTART _edit_cursor
                 ; 0000 00C8     Command(BLINKON);
0001f0 e0af      	LDI  R26,LOW(15)
0001f1 d051      	RCALL _Command
                 ; 0000 00C9     if(loc == 1) Command(EDITCURSOR);
0001f2 91a0 0524 	LDS  R26,_loc
0001f4 30a1      	CPI  R26,LOW(0x1)
0001f5 f411      	BRNE _0x3E
0001f6 2da5      	MOV  R26,R5
0001f7 d04b      	RCALL _Command
                 ; 0000 00CA     if(loc == 2) Command(EDITCURSOR-1);
                 _0x3E:
0001f8 91a0 0524 	LDS  R26,_loc
0001fa 30a2      	CPI  R26,LOW(0x2)
0001fb f419      	BRNE _0x3F
0001fc 2da5      	MOV  R26,R5
0001fd 50a1      	SUBI R26,LOW(1)
0001fe d044      	RCALL _Command
                 ; 0000 00CB     if(loc == 3) Command(EDITCURSOR-3);
                 _0x3F:
0001ff 91a0 0524 	LDS  R26,_loc
000201 30a3      	CPI  R26,LOW(0x3)
000202 f419      	BRNE _0x40
000203 2da5      	MOV  R26,R5
000204 50a3      	SUBI R26,LOW(3)
000205 d03d      	RCALL _Command
                 ; 0000 00CC     if(loc == 4) Command(EDITCURSOR-4);
                 _0x40:
000206 91a0 0524 	LDS  R26,_loc
000208 30a4      	CPI  R26,LOW(0x4)
000209 f419      	BRNE _0x41
00020a 2da5      	MOV  R26,R5
00020b 50a4      	SUBI R26,LOW(4)
00020c d036      	RCALL _Command
                 ; 0000 00CD     if(loc == 5) Command(EDITCURSOR-6);
                 _0x41:
00020d 91a0 0524 	LDS  R26,_loc
00020f 30a5      	CPI  R26,LOW(0x5)
000210 f419      	BRNE _0x42
000211 2da5      	MOV  R26,R5
000212 50a6      	SUBI R26,LOW(6)
000213 d02f      	RCALL _Command
                 ; 0000 00CE     if(loc == 6) Command(EDITCURSOR-7);
                 _0x42:
000214 91a0 0524 	LDS  R26,_loc
000216 30a6      	CPI  R26,LOW(0x6)
000217 f419      	BRNE _0x43
000218 2da5      	MOV  R26,R5
000219 50a7      	SUBI R26,LOW(7)
00021a d028      	RCALL _Command
                 ; 0000 00CF }
                 _0x43:
00021b 9508      	RET
                 ; .FEND
                 ;
                 ;// LCD 초기화
                 ;void LCD_init(void)
                 ; 0000 00D3 {
                 _LCD_init:
                 ; .FSTART _LCD_init
                 ; 0000 00D4     DDRA = 0xFF; // 포트 A 출력 설정
00021c efef      	LDI  R30,LOW(255)
00021d bbea      	OUT  0x1A,R30
                 ; 0000 00D5     PORTA &= 0xFB; // E = 0;
00021e 98da      	CBI  0x1B,2
                 ; 0000 00D6     delay_ms(15);
00021f e0af      	LDI  R26,LOW(15)
000220 d1f3      	RCALL SUBOPT_0x4
                 ; 0000 00D7     Command(0x20);
                 ; 0000 00D8     delay_ms(5);
000221 e0a5      	LDI  R26,LOW(5)
000222 d1f1      	RCALL SUBOPT_0x4
                 ; 0000 00D9     Command(0x20);
                 ; 0000 00DA     delay_us(100);
                +
000223 e980     +LDI R24 , LOW ( 400 )
000224 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000225 9701     +SBIW R24 , 1
000226 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
                 ; 0000 00DB     Command(0x20);
000227 e2a0      	LDI  R26,LOW(32)
000228 d01a      	RCALL _Command
                 ; 0000 00DC     Command(FUNCSET);
000229 e2a8      	LDI  R26,LOW(40)
00022a d018      	RCALL _Command
                 ; 0000 00DD     Command(DISPON);
00022b e0ac      	LDI  R26,LOW(12)
00022c d016      	RCALL _Command
                 ; 0000 00DE     Command(ALLCLR);
00022d e0a1      	LDI  R26,LOW(1)
00022e d014      	RCALL _Command
                 ; 0000 00DF     Command(ENTMODE);
00022f e0a6      	LDI  R26,LOW(6)
000230 d012      	RCALL _Command
                 ; 0000 00E0 }
000231 9508      	RET
                 ; .FEND
                 ;
                 ;// 문자열 출력 함수
                 ;void LCD_String(char *str)
                 ; 0000 00E4 {
                 _LCD_String:
                 ; .FSTART _LCD_String
                 ; 0000 00E5     char *pStr=0;
                 ; 0000 00E6     pStr = str;
000232 d21f      	RCALL __SAVELOCR4
000233 019d      	MOVW R18,R26
                 ;	*str -> R18,R19
                 ;	*pStr -> R16,R17
                +
000234 e000     +LDI R16 , LOW ( 0 )
000235 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000236 0189      	MOVW R16,R18
                 ; 0000 00E7     while(*pStr) Data(*pStr++);
                 _0x44:
000237 01d8      	MOVW R26,R16
000238 91ec      	LD   R30,X
000239 30e0      	CPI  R30,0
00023a f029      	BREQ _0x46
                +
00023b 5f0f     +SUBI R16 , LOW ( - 1 )
00023c 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00023d 91ac      	LD   R26,X
00023e d009      	RCALL _Data
00023f cff7      	RJMP _0x44
                 _0x46:
                 ; 0000 00E8 }
000240 d218      	RCALL __LOADLOCR4
000241 9624      	ADIW R28,4
000242 9508      	RET
                 ; .FEND
                 ;
                 ;// 인스트럭션 쓰기 함수
                 ;void Command(unsigned char byte)
                 ; 0000 00EC {
                 _Command:
                 ; .FSTART _Command
                 ; 0000 00ED     Busy();
000243 d1d4      	RCALL SUBOPT_0x5
                 ;	byte -> R17
                 ; 0000 00EE 
                 ; 0000 00EF     // 인스트럭션 상위 바이트
                 ; 0000 00F0     PORTA = (byte & 0xF0); // 데이터
                 ; 0000 00F1     PORTA &= 0xFE; //RS = 0;
000244 98d8      	CBI  0x1B,0
                 ; 0000 00F2     PORTA &= 0xFD; //RW = 0;
000245 d1d9      	RCALL SUBOPT_0x6
                 ; 0000 00F3     delay_us(1);
                 ; 0000 00F4     PORTA |= 0x04; //E = 1;
                 ; 0000 00F5     delay_us(1);
                 ; 0000 00F6     PORTA &= 0xFB; //E = 0;
                 ; 0000 00F7 
                 ; 0000 00F8     // 인스트럭션 하위 바이트
                 ; 0000 00F9     PORTA = ((byte<<4) & 0xF0); // 데이터
                 ; 0000 00FA     PORTA &= 0xFE; //RS = 0;
000246 98d8      	CBI  0x1B,0
                 ; 0000 00FB     PORTA &= 0xFD; //RW = 0;
000247 c004      	RJMP _0x20A0002
                 ; 0000 00FC     delay_us(1);
                 ; 0000 00FD     PORTA |= 0x04; //E = 1;
                 ; 0000 00FE     delay_us(1);
                 ; 0000 00FF     PORTA &= 0xFB; //E = 0;
                 ; 0000 0100 }
                 ; .FEND
                 ;
                 ;// 데이터 쓰기 함수
                 ;void Data(unsigned char byte)
                 ; 0000 0104 {
                 _Data:
                 ; .FSTART _Data
                 ; 0000 0105     Busy();
000248 d1cf      	RCALL SUBOPT_0x5
                 ;	byte -> R17
                 ; 0000 0106 
                 ; 0000 0107     // 데이터 상위 바이트
                 ; 0000 0108     PORTA = (byte & 0xF0); // 데이터
                 ; 0000 0109     PORTA |= 0x01; //RS = 1;
000249 9ad8      	SBI  0x1B,0
                 ; 0000 010A     PORTA &= 0xFD; //RW = 0;
00024a d1d4      	RCALL SUBOPT_0x6
                 ; 0000 010B     delay_us(1);
                 ; 0000 010C     PORTA |= 0x04; //E = 1;
                 ; 0000 010D     delay_us(1);
                 ; 0000 010E     PORTA &= 0xFB; //E = 0;
                 ; 0000 010F     // 데이터 하위 바이트
                 ; 0000 0110     PORTA = ((byte<<4) & 0xF0); // 데이터
                 ; 0000 0111     PORTA |= 0x01; //RS = 1;
00024b 9ad8      	SBI  0x1B,0
                 ; 0000 0112     PORTA &= 0xFD; //RW = 0;
                 _0x20A0002:
00024c 98d9      	CBI  0x1B,1
                 ; 0000 0113     delay_us(1);
                +
00024d e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
00024e 958a     +DEC R24
00024f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
                 ; 0000 0114     PORTA |= 0x04; //E = 1;
000250 9ada      	SBI  0x1B,2
                 ; 0000 0115     delay_us(1);
                +
000251 e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
000252 958a     +DEC R24
000253 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
                 ; 0000 0116     PORTA &= 0xFB; //E = 0;
000254 98da      	CBI  0x1B,2
                 ; 0000 0117 }
000255 9119      	LD   R17,Y+
000256 9508      	RET
                 ; .FEND
                 ;
                 ;// Busy Flag Check -> 일반적인 BF를 체크하는 것이 아니라
                 ;// 일정한 시간 지연을 이용한다.
                 ;void Busy(void)
                 ; 0000 011C {
                 _Busy:
                 ; .FSTART _Busy
                 ; 0000 011D     delay_ms(2);
000257 e0a2      	LDI  R26,LOW(2)
000258 e0b0      	LDI  R27,0
000259 d21d      	RCALL _delay_ms
                 ; 0000 011E }
00025a 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
00025b d1f4      	RCALL __SAVELOCR6
00025c 019d      	MOVW R18,R26
00025d 815e      	LDD  R21,Y+6
00025e 9612      	ADIW R26,2
00025f d20a      	RCALL __GETW1P
000260 9730      	SBIW R30,0
000261 f0e1      	BREQ _0x2000010
000262 01d9      	MOVW R26,R18
000263 9614      	ADIW R26,4
000264 d205      	RCALL __GETW1P
000265 018f      	MOVW R16,R30
000266 9730      	SBIW R30,0
000267 f059      	BREQ _0x2000012
                +
000268 3002     +CPI R16 , LOW ( 2 )
000269 e0e0     +LDI R30 , HIGH ( 2 )
00026a 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00026b f060      	BRLO _0x2000013
00026c 01f8      	MOVW R30,R16
00026d 9731      	SBIW R30,1
00026e 018f      	MOVW R16,R30
                +
00026f 01d9     +MOVW R26 , R18
000270 9614     +ADIW R26 , 4
000271 93ed     +ST X + , R30
000272 93fc     +ST X , R31
                 	__PUTW1RNS 18,4
                 _0x2000012:
000273 01d9      	MOVW R26,R18
000274 9612      	ADIW R26,2
000275 d1b7      	RCALL SUBOPT_0x7
000276 9731      	SBIW R30,1
000277 8350      	ST   Z,R21
                 _0x2000013:
000278 01d9      	MOVW R26,R18
000279 d1f0      	RCALL __GETW1P
00027a 23ff      	TST  R31
00027b f00a      	BRMI _0x2000014
00027c d1b0      	RCALL SUBOPT_0x7
                 _0x2000014:
00027d c005      	RJMP _0x2000015
                 _0x2000010:
00027e 01d9      	MOVW R26,R18
00027f efef      	LDI  R30,LOW(65535)
000280 efff      	LDI  R31,HIGH(65535)
000281 93ed      	ST   X+,R30
000282 93fc      	ST   X,R31
                 _0x2000015:
000283 d1d3      	RCALL __LOADLOCR6
000284 9627      	ADIW R28,7
000285 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000286 93ba      	ST   -Y,R27
000287 93aa      	ST   -Y,R26
000288 9726      	SBIW R28,6
000289 d1c6      	RCALL __SAVELOCR6
00028a e010      	LDI  R17,0
00028b 85ac      	LDD  R26,Y+12
00028c 85bd      	LDD  R27,Y+12+1
00028d e0e0      	LDI  R30,LOW(0)
00028e e0f0      	LDI  R31,HIGH(0)
00028f 93ed      	ST   X+,R30
000290 93fc      	ST   X,R31
                 _0x2000016:
000291 89ea      	LDD  R30,Y+18
000292 89fb      	LDD  R31,Y+18+1
000293 9631      	ADIW R30,1
000294 8bea      	STD  Y+18,R30
000295 8bfb      	STD  Y+18+1,R31
000296 9731      	SBIW R30,1
000297 91e4      	LPM  R30,Z
000298 2f2e      	MOV  R18,R30
000299 30e0      	CPI  R30,0
00029a f409      	BRNE PC+2
00029b c109      	RJMP _0x2000018
00029c 2fe1      	MOV  R30,R17
00029d 30e0      	CPI  R30,0
00029e f431      	BRNE _0x200001C
00029f 3225      	CPI  R18,37
0002a0 f411      	BRNE _0x200001D
0002a1 e011      	LDI  R17,LOW(1)
0002a2 c001      	RJMP _0x200001E
                 _0x200001D:
0002a3 d18f      	RCALL SUBOPT_0x8
                 _0x200001E:
0002a4 c0ff      	RJMP _0x200001B
                 _0x200001C:
0002a5 30e1      	CPI  R30,LOW(0x1)
0002a6 f4a1      	BRNE _0x200001F
0002a7 3225      	CPI  R18,37
0002a8 f411      	BRNE _0x2000020
0002a9 d189      	RCALL SUBOPT_0x8
0002aa c0f8      	RJMP _0x20000CC
                 _0x2000020:
0002ab e012      	LDI  R17,LOW(2)
0002ac e040      	LDI  R20,LOW(0)
0002ad e000      	LDI  R16,LOW(0)
0002ae 322d      	CPI  R18,45
0002af f411      	BRNE _0x2000021
0002b0 e001      	LDI  R16,LOW(1)
0002b1 c0f2      	RJMP _0x200001B
                 _0x2000021:
0002b2 322b      	CPI  R18,43
0002b3 f411      	BRNE _0x2000022
0002b4 e24b      	LDI  R20,LOW(43)
0002b5 c0ee      	RJMP _0x200001B
                 _0x2000022:
0002b6 3220      	CPI  R18,32
0002b7 f411      	BRNE _0x2000023
0002b8 e240      	LDI  R20,LOW(32)
0002b9 c0ea      	RJMP _0x200001B
                 _0x2000023:
0002ba c002      	RJMP _0x2000024
                 _0x200001F:
0002bb 30e2      	CPI  R30,LOW(0x2)
0002bc f439      	BRNE _0x2000025
                 _0x2000024:
0002bd e050      	LDI  R21,LOW(0)
0002be e013      	LDI  R17,LOW(3)
0002bf 3320      	CPI  R18,48
0002c0 f411      	BRNE _0x2000026
0002c1 6800      	ORI  R16,LOW(128)
0002c2 c0e1      	RJMP _0x200001B
                 _0x2000026:
0002c3 c003      	RJMP _0x2000027
                 _0x2000025:
0002c4 30e3      	CPI  R30,LOW(0x3)
0002c5 f009      	BREQ PC+2
0002c6 c0dd      	RJMP _0x200001B
                 _0x2000027:
0002c7 3320      	CPI  R18,48
0002c8 f010      	BRLO _0x200002A
0002c9 332a      	CPI  R18,58
0002ca f008      	BRLO _0x200002B
                 _0x200002A:
0002cb c007      	RJMP _0x2000029
                 _0x200002B:
0002cc e0aa      	LDI  R26,LOW(10)
0002cd 9f5a      	MUL  R21,R26
0002ce 2d50      	MOV  R21,R0
0002cf 2fe2      	MOV  R30,R18
0002d0 53e0      	SUBI R30,LOW(48)
0002d1 0f5e      	ADD  R21,R30
0002d2 c0d1      	RJMP _0x200001B
                 _0x2000029:
0002d3 2fe2      	MOV  R30,R18
0002d4 36e3      	CPI  R30,LOW(0x63)
0002d5 f439      	BRNE _0x200002F
0002d6 d163      	RCALL SUBOPT_0x9
0002d7 89e8      	LDD  R30,Y+16
0002d8 89f9      	LDD  R31,Y+16+1
0002d9 81a4      	LDD  R26,Z+4
0002da 93aa      	ST   -Y,R26
0002db d164      	RCALL SUBOPT_0xA
0002dc c0c6      	RJMP _0x2000030
                 _0x200002F:
0002dd 37e3      	CPI  R30,LOW(0x73)
0002de f429      	BRNE _0x2000032
0002df d15a      	RCALL SUBOPT_0x9
0002e0 d165      	RCALL SUBOPT_0xB
0002e1 d0fb      	RCALL _strlen
0002e2 2f1e      	MOV  R17,R30
0002e3 c007      	RJMP _0x2000033
                 _0x2000032:
0002e4 37e0      	CPI  R30,LOW(0x70)
0002e5 f449      	BRNE _0x2000035
0002e6 d153      	RCALL SUBOPT_0x9
0002e7 d15e      	RCALL SUBOPT_0xB
0002e8 d100      	RCALL _strlenf
0002e9 2f1e      	MOV  R17,R30
0002ea 6008      	ORI  R16,LOW(8)
                 _0x2000033:
0002eb 6002      	ORI  R16,LOW(2)
0002ec 770f      	ANDI R16,LOW(127)
0002ed e030      	LDI  R19,LOW(0)
0002ee c038      	RJMP _0x2000036
                 _0x2000035:
0002ef 36e4      	CPI  R30,LOW(0x64)
0002f0 f011      	BREQ _0x2000039
0002f1 36e9      	CPI  R30,LOW(0x69)
0002f2 f411      	BRNE _0x200003A
                 _0x2000039:
0002f3 6004      	ORI  R16,LOW(4)
0002f4 c002      	RJMP _0x200003B
                 _0x200003A:
0002f5 37e5      	CPI  R30,LOW(0x75)
0002f6 f431      	BRNE _0x200003C
                 _0x200003B:
0002f7 e8ec      	LDI  R30,LOW(_tbl10_G100*2)
0002f8 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0002f9 83ee      	STD  Y+6,R30
0002fa 83ff      	STD  Y+6+1,R31
0002fb e015      	LDI  R17,LOW(5)
0002fc c00c      	RJMP _0x200003D
                 _0x200003C:
0002fd 35e8      	CPI  R30,LOW(0x58)
0002fe f411      	BRNE _0x200003F
0002ff 6008      	ORI  R16,LOW(8)
000300 c003      	RJMP _0x2000040
                 _0x200003F:
000301 37e8      	CPI  R30,LOW(0x78)
000302 f009      	BREQ PC+2
000303 c09f      	RJMP _0x2000071
                 _0x2000040:
000304 e9e6      	LDI  R30,LOW(_tbl16_G100*2)
000305 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000306 83ee      	STD  Y+6,R30
000307 83ff      	STD  Y+6+1,R31
000308 e014      	LDI  R17,LOW(4)
                 _0x200003D:
000309 ff02      	SBRS R16,2
00030a c015      	RJMP _0x2000042
00030b d12e      	RCALL SUBOPT_0x9
00030c 89a8      	LDD  R26,Y+16
00030d 89b9      	LDD  R27,Y+16+1
00030e 9614      	ADIW R26,4
00030f 91ed      	LD   R30,X+
000310 91fd      	LD   R31,X+
000311 87ea      	STD  Y+10,R30
000312 87fb      	STD  Y+10+1,R31
000313 85ab      	LDD  R26,Y+11
000314 23aa      	TST  R26
000315 f422      	BRPL _0x2000043
000316 d14f      	RCALL __ANEGW1
000317 87ea      	STD  Y+10,R30
000318 87fb      	STD  Y+10+1,R31
000319 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
00031a 3040      	CPI  R20,0
00031b f011      	BREQ _0x2000044
00031c 5f1f      	SUBI R17,-LOW(1)
00031d c001      	RJMP _0x2000045
                 _0x2000044:
00031e 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
00031f c007      	RJMP _0x2000046
                 _0x2000042:
000320 d119      	RCALL SUBOPT_0x9
000321 89a8      	LDD  R26,Y+16
000322 89b9      	LDD  R27,Y+16+1
000323 9614      	ADIW R26,4
000324 d145      	RCALL __GETW1P
000325 87ea      	STD  Y+10,R30
000326 87fb      	STD  Y+10+1,R31
                 _0x2000046:
                 _0x2000036:
000327 fd00      	SBRC R16,0
000328 c010      	RJMP _0x2000047
                 _0x2000048:
000329 1715      	CP   R17,R21
00032a f470      	BRSH _0x200004A
00032b ff07      	SBRS R16,7
00032c c008      	RJMP _0x200004B
00032d ff02      	SBRS R16,2
00032e c004      	RJMP _0x200004C
00032f 7f0b      	ANDI R16,LOW(251)
000330 2f24      	MOV  R18,R20
000331 5011      	SUBI R17,LOW(1)
000332 c001      	RJMP _0x200004D
                 _0x200004C:
000333 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000334 c001      	RJMP _0x200004E
                 _0x200004B:
000335 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000336 d0fc      	RCALL SUBOPT_0x8
000337 5051      	SUBI R21,LOW(1)
000338 cff0      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000339 2f31      	MOV  R19,R17
00033a ff01      	SBRS R16,1
00033b c016      	RJMP _0x200004F
                 _0x2000050:
00033c 3030      	CPI  R19,0
00033d f099      	BREQ _0x2000052
00033e ff03      	SBRS R16,3
00033f c006      	RJMP _0x2000053
000340 81ee      	LDD  R30,Y+6
000341 81ff      	LDD  R31,Y+6+1
000342 9125      	LPM  R18,Z+
000343 83ee      	STD  Y+6,R30
000344 83ff      	STD  Y+6+1,R31
000345 c005      	RJMP _0x2000054
                 _0x2000053:
000346 81ae      	LDD  R26,Y+6
000347 81bf      	LDD  R27,Y+6+1
000348 912d      	LD   R18,X+
000349 83ae      	STD  Y+6,R26
00034a 83bf      	STD  Y+6+1,R27
                 _0x2000054:
00034b d0e7      	RCALL SUBOPT_0x8
00034c 3050      	CPI  R21,0
00034d f009      	BREQ _0x2000055
00034e 5051      	SUBI R21,LOW(1)
                 _0x2000055:
00034f 5031      	SUBI R19,LOW(1)
000350 cfeb      	RJMP _0x2000050
                 _0x2000052:
000351 c048      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000352 e320      	LDI  R18,LOW(48)
000353 81ee      	LDD  R30,Y+6
000354 81ff      	LDD  R31,Y+6+1
000355 d118      	RCALL __GETW1PF
000356 87e8      	STD  Y+8,R30
000357 87f9      	STD  Y+8+1,R31
000358 81ee      	LDD  R30,Y+6
000359 81ff      	LDD  R31,Y+6+1
00035a 9632      	ADIW R30,2
00035b 83ee      	STD  Y+6,R30
00035c 83ff      	STD  Y+6+1,R31
                 _0x200005A:
00035d 85e8      	LDD  R30,Y+8
00035e 85f9      	LDD  R31,Y+8+1
00035f 85aa      	LDD  R26,Y+10
000360 85bb      	LDD  R27,Y+10+1
000361 17ae      	CP   R26,R30
000362 07bf      	CPC  R27,R31
000363 f050      	BRLO _0x200005C
000364 5f2f      	SUBI R18,-LOW(1)
000365 85a8      	LDD  R26,Y+8
000366 85b9      	LDD  R27,Y+8+1
000367 85ea      	LDD  R30,Y+10
000368 85fb      	LDD  R31,Y+10+1
000369 1bea      	SUB  R30,R26
00036a 0bfb      	SBC  R31,R27
00036b 87ea      	STD  Y+10,R30
00036c 87fb      	STD  Y+10+1,R31
00036d cfef      	RJMP _0x200005A
                 _0x200005C:
00036e 332a      	CPI  R18,58
00036f f028      	BRLO _0x200005D
000370 ff03      	SBRS R16,3
000371 c002      	RJMP _0x200005E
000372 5f29      	SUBI R18,-LOW(7)
000373 c001      	RJMP _0x200005F
                 _0x200005E:
000374 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000375 fd04      	SBRC R16,4
000376 c019      	RJMP _0x2000061
000377 3321      	CPI  R18,49
000378 f420      	BRSH _0x2000063
000379 85a8      	LDD  R26,Y+8
00037a 85b9      	LDD  R27,Y+8+1
00037b 9711      	SBIW R26,1
00037c f409      	BRNE _0x2000062
                 _0x2000063:
00037d c009      	RJMP _0x20000CD
                 _0x2000062:
00037e 1753      	CP   R21,R19
00037f f010      	BRLO _0x2000067
000380 ff00      	SBRS R16,0
000381 c001      	RJMP _0x2000068
                 _0x2000067:
000382 c011      	RJMP _0x2000066
                 _0x2000068:
000383 e220      	LDI  R18,LOW(32)
000384 ff07      	SBRS R16,7
000385 c00a      	RJMP _0x2000069
000386 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000387 6100      	ORI  R16,LOW(16)
000388 ff02      	SBRS R16,2
000389 c006      	RJMP _0x200006A
00038a 7f0b      	ANDI R16,LOW(251)
00038b 934a      	ST   -Y,R20
00038c d0b3      	RCALL SUBOPT_0xA
00038d 3050      	CPI  R21,0
00038e f009      	BREQ _0x200006B
00038f 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000390 d0a2      	RCALL SUBOPT_0x8
000391 3050      	CPI  R21,0
000392 f009      	BREQ _0x200006C
000393 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000394 5031      	SUBI R19,LOW(1)
000395 85a8      	LDD  R26,Y+8
000396 85b9      	LDD  R27,Y+8+1
000397 9712      	SBIW R26,2
000398 f008      	BRLO _0x2000059
000399 cfb8      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
00039a ff00      	SBRS R16,0
00039b c007      	RJMP _0x200006D
                 _0x200006E:
00039c 3050      	CPI  R21,0
00039d f029      	BREQ _0x2000070
00039e 5051      	SUBI R21,LOW(1)
00039f e2e0      	LDI  R30,LOW(32)
0003a0 93ea      	ST   -Y,R30
0003a1 d09e      	RCALL SUBOPT_0xA
0003a2 cff9      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
0003a3 e010      	LDI  R17,LOW(0)
                 _0x200001B:
0003a4 ceec      	RJMP _0x2000016
                 _0x2000018:
0003a5 85ac      	LDD  R26,Y+12
0003a6 85bd      	LDD  R27,Y+12+1
0003a7 91ed      	LD   R30,X+
0003a8 91fd      	LD   R31,X+
0003a9 d0ad      	RCALL __LOADLOCR6
0003aa 9664      	ADIW R28,20
0003ab 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0003ac 92ff      	PUSH R15
0003ad 2ef8      	MOV  R15,R24
0003ae 9726      	SBIW R28,6
0003af d0a0      	RCALL __SAVELOCR6
0003b0 01fe      	MOVW R30,R28
0003b1 d0ac      	RCALL __ADDW1R15
                +
0003b2 8546     +LDD R20 , Z + 14
0003b3 8557     +LDD R21 , Z + 14 + 1
                 	__GETWRZ 20,21,14
0003b4 2e04      	MOV  R0,R20
0003b5 2a05      	OR   R0,R21
0003b6 f419      	BRNE _0x2000072
0003b7 efef      	LDI  R30,LOW(65535)
0003b8 efff      	LDI  R31,HIGH(65535)
0003b9 c01f      	RJMP _0x20A0001
                 _0x2000072:
0003ba 01de      	MOVW R26,R28
0003bb 9618      	ADIW R26,8
0003bc d0a5      	RCALL __ADDW2R15
0003bd 018d      	MOVW R16,R26
                +
0003be 8748     +STD Y + 8 , R20
0003bf 8759     +STD Y + 8 + 1 , R21
                 	__PUTWSR 20,21,8
0003c0 e0e0      	LDI  R30,LOW(0)
0003c1 87ea      	STD  Y+10,R30
0003c2 87eb      	STD  Y+10+1,R30
0003c3 01de      	MOVW R26,R28
0003c4 961c      	ADIW R26,12
0003c5 d09c      	RCALL __ADDW2R15
0003c6 91ed      	LD   R30,X+
0003c7 91fd      	LD   R31,X+
0003c8 93fa      	ST   -Y,R31
0003c9 93ea      	ST   -Y,R30
0003ca 931a      	ST   -Y,R17
0003cb 930a      	ST   -Y,R16
0003cc e5eb      	LDI  R30,LOW(_put_buff_G100)
0003cd e0f2      	LDI  R31,HIGH(_put_buff_G100)
0003ce 93fa      	ST   -Y,R31
0003cf 93ea      	ST   -Y,R30
0003d0 01de      	MOVW R26,R28
0003d1 961c      	ADIW R26,12
0003d2 deb3      	RCALL __print_G100
0003d3 019f      	MOVW R18,R30
0003d4 85a8      	LDD  R26,Y+8
0003d5 85b9      	LDD  R27,Y+8+1
0003d6 e0e0      	LDI  R30,LOW(0)
0003d7 93ec      	ST   X,R30
0003d8 01f9      	MOVW R30,R18
                 _0x20A0001:
0003d9 d07d      	RCALL __LOADLOCR6
0003da 962c      	ADIW R28,12
0003db 90ff      	POP  R15
0003dc 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0003dd 93ba      	ST   -Y,R27
0003de 93aa      	ST   -Y,R26
0003df 91a9          ld   r26,y+
0003e0 91b9          ld   r27,y+
0003e1 27ee          clr  r30
0003e2 27ff          clr  r31
                 strlen0:
0003e3 916d          ld   r22,x+
0003e4 2366          tst  r22
0003e5 f011          breq strlen1
0003e6 9631          adiw r30,1
0003e7 cffb          rjmp strlen0
                 strlen1:
0003e8 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0003e9 93ba      	ST   -Y,R27
0003ea 93aa      	ST   -Y,R26
0003eb 27aa          clr  r26
0003ec 27bb          clr  r27
0003ed 91e9          ld   r30,y+
0003ee 91f9          ld   r31,y+
                 strlenf0:
0003ef 9005      	lpm  r0,z+
0003f0 2000          tst  r0
0003f1 f011          breq strlenf1
0003f2 9611          adiw r26,1
0003f3 cffb          rjmp strlenf0
                 strlenf1:
0003f4 01fd          movw r30,r26
0003f5 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _sec:
000522           	.BYTE 0x1
                 _mSec:
000523           	.BYTE 0x1
                 _loc:
000524           	.BYTE 0x1
                 _buf:
000525           	.BYTE 0x14
                 __seed_G102:
000539           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x0:
0003f6 920a      	ST   -Y,R0
0003f7 921a      	ST   -Y,R1
0003f8 92fa      	ST   -Y,R15
0003f9 936a      	ST   -Y,R22
0003fa 937a      	ST   -Y,R23
0003fb 938a      	ST   -Y,R24
0003fc 939a      	ST   -Y,R25
0003fd 93aa      	ST   -Y,R26
0003fe 93ba      	ST   -Y,R27
0003ff 93ea      	ST   -Y,R30
000400 93fa      	ST   -Y,R31
000401 b7ef      	IN   R30,SREG
000402 93ea      	ST   -Y,R30
000403 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
000404 efef      	LDI  R30,LOW(255)
000405 e0f0      	LDI  R31,HIGH(255)
000406 014f      	MOVW R8,R30
000407 24aa      	CLR  R10
000408 24bb      	CLR  R11
000409 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
00040a 2488      	CLR  R8
00040b 2499      	CLR  R9
00040c 24aa      	CLR  R10
00040d 24bb      	CLR  R11
00040e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
00040f 27ff      	CLR  R31
000410 2766      	CLR  R22
000411 2777      	CLR  R23
000412 d05f      	RCALL __PUTPARD1
000413 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000414 e0b0      	LDI  R27,0
000415 d061      	RCALL _delay_ms
000416 e2a0      	LDI  R26,LOW(32)
000417 ce2b      	RJMP _Command
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
000418 931a      	ST   -Y,R17
000419 2f1a      	MOV  R17,R26
00041a de3c      	RCALL _Busy
00041b 2fe1      	MOV  R30,R17
00041c 7fe0      	ANDI R30,LOW(0xF0)
00041d bbeb      	OUT  0x1B,R30
00041e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x6:
00041f 98d9      	CBI  0x1B,1
                +
000420 e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
000421 958a     +DEC R24
000422 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
000423 9ada      	SBI  0x1B,2
                +
000424 e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
000425 958a     +DEC R24
000426 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
000427 98da      	CBI  0x1B,2
000428 2fe1      	MOV  R30,R17
000429 95e2      	SWAP R30
00042a 7fe0      	ANDI R30,LOW(0xF0)
00042b bbeb      	OUT  0x1B,R30
00042c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
00042d 91ed      	LD   R30,X+
00042e 91fd      	LD   R31,X+
00042f 9631      	ADIW R30,1
000430 93fe      	ST   -X,R31
000431 93ee      	ST   -X,R30
000432 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x8:
000433 932a      	ST   -Y,R18
000434 85ad      	LDD  R26,Y+13
000435 85be      	LDD  R27,Y+13+1
000436 85ef      	LDD  R30,Y+15
000437 89f8      	LDD  R31,Y+15+1
000438 9509      	ICALL
000439 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x9:
00043a 89e8      	LDD  R30,Y+16
00043b 89f9      	LDD  R31,Y+16+1
00043c 9734      	SBIW R30,4
00043d 8be8      	STD  Y+16,R30
00043e 8bf9      	STD  Y+16+1,R31
00043f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xA:
000440 85ad      	LDD  R26,Y+13
000441 85be      	LDD  R27,Y+13+1
000442 85ef      	LDD  R30,Y+15
000443 89f8      	LDD  R31,Y+15+1
000444 9509      	ICALL
000445 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xB:
000446 89a8      	LDD  R26,Y+16
000447 89b9      	LDD  R27,Y+16+1
000448 9614      	ADIW R26,4
000449 91ed      	LD   R30,X+
00044a 91fd      	LD   R31,X+
00044b 83ee      	STD  Y+6,R30
00044c 83ff      	STD  Y+6+1,R31
00044d 81ae      	LDD  R26,Y+6
00044e 81bf      	LDD  R27,Y+6+1
00044f 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000450 935a      	ST   -Y,R21
                 __SAVELOCR5:
000451 934a      	ST   -Y,R20
                 __SAVELOCR4:
000452 933a      	ST   -Y,R19
                 __SAVELOCR3:
000453 932a      	ST   -Y,R18
                 __SAVELOCR2:
000454 931a      	ST   -Y,R17
000455 930a      	ST   -Y,R16
000456 9508      	RET
                 
                 __LOADLOCR6:
000457 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000458 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000459 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00045a 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00045b 8119      	LDD  R17,Y+1
00045c 8108      	LD   R16,Y
00045d 9508      	RET
                 
                 __ADDW1R15:
00045e 2400      	CLR  R0
00045f 0def      	ADD  R30,R15
000460 1df0      	ADC  R31,R0
000461 9508      	RET
                 
                 __ADDW2R15:
000462 2400      	CLR  R0
000463 0daf      	ADD  R26,R15
000464 1db0      	ADC  R27,R0
000465 9508      	RET
                 
                 __ANEGW1:
000466 95f1      	NEG  R31
000467 95e1      	NEG  R30
000468 40f0      	SBCI R31,0
000469 9508      	RET
                 
                 __GETW1P:
00046a 91ed      	LD   R30,X+
00046b 91fc      	LD   R31,X
00046c 9711      	SBIW R26,1
00046d 9508      	RET
                 
                 __GETW1PF:
00046e 9005      	LPM  R0,Z+
00046f 91f4      	LPM  R31,Z
000470 2de0      	MOV  R30,R0
000471 9508      	RET
                 
                 __PUTPARD1:
000472 937a      	ST   -Y,R23
000473 936a      	ST   -Y,R22
000474 93fa      	ST   -Y,R31
000475 93ea      	ST   -Y,R30
000476 9508      	RET
                 
                 _delay_ms:
000477 9610      	adiw r26,0
000478 f039      	breq __delay_ms1
                 __delay_ms0:
000479 95a8      	wdr
                +
00047a ea80     +LDI R24 , LOW ( 0xFA0 )
00047b e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
00047c 9701     +SBIW R24 , 1
00047d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
00047e 9711      	sbiw r26,1
00047f f7c9      	brne __delay_ms0
                 __delay_ms1:
000480 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  17 r1 :   3 r2 :   0 r3 :   0 r4 :   9 r5 :   6 r6 :   8 r7 :   5 
r8 :   6 r9 :   2 r10:   6 r11:   2 r12:   8 r13:   8 r14:   0 r15:   7 
r16:  41 r17:  34 r18:  37 r19:   8 r20:  12 r21:  22 r22:   8 r23:   4 
r24:  24 r25:   6 r26: 133 r27:  34 r28:  12 r29:   1 r30: 223 r31:  72 
x  :  28 y  : 156 z  :  16 
Registers used: 32 out of 35 (91.4%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   5 
adiw  :  21 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  16 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  10 
brlt  :   0 brmi  :   1 brne  :  50 brpl  :   1 brsh  :   8 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  34 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :  14 cpc   :   2 cpi   :  51 cpse  :   0 dec   :   5 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :   3 inc   :   5 jmp   :  36 ld    :  39 ldd   :  58 
ldi   : 136 lds   :  22 lpm   :  14 lsl   :   1 lsr   :   0 mov   :  27 
movw  :  31 mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :  10 
or    :   1 ori   :   6 out   :  20 pop   :   1 push  :   1 rcall :  89 
ret   :  32 reti  :   3 rjmp  :  71 rol   :   0 ror   :   0 sbc   :   1 
sbci  :   2 sbi   :   9 sbic  :   0 sbis  :   1 sbiw  :  17 sbr   :   0 
sbrc  :   2 sbrs  :  11 sec   :   0 seh   :   0 sei   :   0 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  61 std   :  30 sts   :  11 sub   :   1 subi  :  26 
swap  :   1 tst   :   4 wdr   :   1 
Instructions used: 56 out of 117 (47.9%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000902   2186    120   2306  131072   1.8%
[.dseg] 0x000100 0x00053d      0     61     61    4096   1.5%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 12 warnings
