;// 마이크로프로세서
;// UV살균 무선 충전 시계 무드등
;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <string.h>
;#include <stdlib.h>
;#include <delay.h>
;
;#define FUNCSET 0x28 //Function Set
;#define ENTMODE 0x06 // Entry Mode Set
;#define ALLCLR 0x01 // All Clear
;#define DISPON 0x0c // Display On
;#define DISPOFF 0x08 // Display Off
;#define BLINKON 0x0F // Display On & Cursor On & Cursor Blink on
;#define BLINKOFF 0x0C // Display On & Cursor Off & Cursor Blink off
;#define LINE2 0xC0 // 2nd Line Move 1110 0000
;#define HOME 0x02 // Cursor Home
;#define RSHIFT 0x1C // Display Right Shift
;
;#define nop2 {#asm("nop"); #asm("nop");}
;#define nop8 {nop2; nop2; nop2; nop2;}
;#define ws2812b PORTB.7
;
;char EDITCURSOR = 0x8E; // Editting Cursor
;char mood = 0; // Mood Light On/Off & Color change
;int duty1 = 0, duty2 = 0, duty3 = 0; // Mood Light RGB Value
;char hour=0, _min=0, sec=0, mSec=0, loc=0;
;char buf[20];
;
;void byte_out(char d);
;void LCD_init(void); //LCD 초기화
;void LCD_String(char *); // 문자열 출력 함수
;void Busy(void);
;void Command(unsigned char); //인스트럭션 쓰기 함수
;void Data(unsigned char); //데이터 쓰기 함수
;void time_display(void);
;void edit_cursor(void);
;
;void main(void)
; 0000 0029 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 002A     char i = 0;
; 0000 002B 
; 0000 002C     DDRB.7 = 1;
;	i -> R17
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 002D     DDRC.7 = 1;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 002E 
; 0000 002F     PORTC.7 = 0;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0030 
; 0000 0031     //인터럽트
; 0000 0032     DDRD = 0x00;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0033     EIMSK = 0b00001111;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0034     EICRA = 0b10101010;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0035     TCCR1B=0x0C; OCR1A=6249; TIMSK=0x10; //16000000/256/(1+6249)=10Hz=0.1sec // A매치
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0036     SREG = 0b10000000;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0037 
; 0000 0038     LCD_init();
;PCODE: $00000024 VOL: 0
; 0000 0039 
; 0000 003A     while(1)
;PCODE: $00000025 VOL: 0
; 0000 003B     {
; 0000 003C         for(i=0;i<8;i++){  //8개의 LED에 차례대로 값을 줌
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 003D             byte_out(duty1); //G
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 003E             byte_out(duty2); //R
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 003F             byte_out(duty3); //B
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0040         }
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0041         delay_ms(5);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0042     }
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0043 }
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 0046 {
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0047     mSec++;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0048     if(mSec> 9)
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0049     {
; 0000 004A         mSec=0;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 004B         if(++sec >59)
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 004C         {
; 0000 004D             sec=0;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 004E             if(++_min >59)
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 004F             {
; 0000 0050                 _min=0;
;PCODE: $00000057 VOL: 0
; 0000 0051                 if(++hour>23) hour=0;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0052             }
;PCODE: $0000005D VOL: 0
; 0000 0053         }
;PCODE: $0000005E VOL: 0
; 0000 0054     }
;PCODE: $0000005F VOL: 0
; 0000 0055     time_display();
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0056     Command(LINE2);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0057     LCD_String(" Microprocessor");
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0058 }
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0

	.DSEG
_0x14:
	.BYTE 0x10
;
;//시계 시간 조정1
;interrupt [EXT_INT0] void external_int0(void)
; 0000 005C {

	.CSEG
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 005D     if(loc == 0)
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 005E     {
; 0000 005F         Command(LINE2);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0060         LCD_String("Editing...       ");
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0061     }
; 0000 0062     TIMSK = 0b00000000; //시간 조절중에는 시계를 멈춤
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0063     loc++;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0064     edit_cursor();
;PCODE: $0000007A VOL: 0
; 0000 0065     if(loc == 7)
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0066     {
; 0000 0067         loc=0;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0068         Command(ALLCLR);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0069         Command(BLINKOFF);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 006A         time_display();
;PCODE: $00000084 VOL: 0
; 0000 006B         TIMSK=0x10;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 006C     }
; 0000 006D }
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0

	.DSEG
_0x16:
	.BYTE 0x12
;
;//시계 시간 조정2
;interrupt [EXT_INT1] void external_int1(void)
; 0000 0071 {

	.CSEG
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0072     if(TIMSK == 0b00000000)
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0073     {
; 0000 0074         if(loc == 1) sec++;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0075         if(loc == 2) sec += 10;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0076         if(loc == 3) _min++;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0077         if(loc == 4) _min += 10;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0078         if(loc == 5) hour++;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0079         if(loc == 6) hour += 10;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 007A         if(sec > 59) sec = 0;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 007B         if(_min > 59) _min = 0;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 007C         if(hour > 24) hour = 0;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 007D         time_display();
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 007E         edit_cursor();
;PCODE: $000000C7 VOL: 0
; 0000 007F     }
; 0000 0080 }
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;
;//RGB LED (Mood Light)
;interrupt [EXT_INT2] void external_int2(void)
; 0000 0084 {
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0085     mood++;
;PCODE: $000000CE VOL: 0
; 0000 0086     if(mood == 1) { // Default Light
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0087         duty1 = 100; //G
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0088         duty2 = 255; //R
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0089         duty3 = 0; //B
;PCODE: $000000D6 VOL: 0
; 0000 008A     }
; 0000 008B     else if(mood == 2) { // RED
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 008C         duty1 = 0; //G
;PCODE: $000000DC VOL: 0
; 0000 008D         duty2 = 255; //R
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 008E         duty3 = 0; //B
;PCODE: $000000DF VOL: 0
; 0000 008F     }
; 0000 0090     else if(mood == 3) { // GREEN
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0091         duty1 = 255; //G
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 0092         duty2 = 0; //R
;PCODE: $000000E7 VOL: 0
; 0000 0093         duty3 = 0; //B
;PCODE: $000000E8 VOL: 0
; 0000 0094     }
; 0000 0095     else if(mood == 4) { // BLUE
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 0096         duty1 = 0; //G
;PCODE: $000000EE VOL: 0
; 0000 0097         duty2 = 0; //R
;PCODE: $000000EF VOL: 0
; 0000 0098         duty3 = 255; //B
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 0099     }
; 0000 009A     else if(mood == 5) { // PURPLE
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 009B         duty1 = 0; //G
;PCODE: $000000F7 VOL: 0
; 0000 009C         duty2 = 95; //R
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 009D         duty3 = 255; //B
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 009E     }
; 0000 009F     else if(mood == 6) { // PINK
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00A0         duty1 = 0; //G
;PCODE: $00000101 VOL: 0
; 0000 00A1         duty2 = 255; //R
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00A2         duty3 = 221; //B
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00A3     }
; 0000 00A4     else if(mood == 7) {
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00A5         duty1 = 0; //G
;PCODE: $0000010B VOL: 0
; 0000 00A6         duty2 = 0; //R
;PCODE: $0000010C VOL: 0
; 0000 00A7         duty3 = 0; //B
;PCODE: $0000010D VOL: 0
; 0000 00A8         mood = 0;
;PCODE: $0000010E VOL: 0
; 0000 00A9     }
; 0000 00AA }
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;
;//UV LED 전원 ON OFF
;interrupt [EXT_INT3] void external_int3(void)
; 0000 00AE {
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00AF     PORTC.7 = !PORTC.7;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00B0 }
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;
;//RGB LED
;void byte_out(char d)
; 0000 00B4 {
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00B5     char i;
; 0000 00B6     for(i=0;i<8;i++){
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;	d -> R16
;	i -> R17
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00B7         if(d&0x80){ ws2812b=1; nop8; ws2812b=0; }
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 00B8         else      { ws2812b=1; nop2; ws2812b=0; }
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 00B9         d<<=1;  // 비트연산자
;PCODE: $0000014E VOL: 0
; 0000 00BA     }
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00BB }
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;
;// 시간 출력
;void time_display(void)
; 0000 00BF {
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00C0     Command(HOME);
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00C1     sprintf(buf,"[TIME][%2d:%2d:%2d]", hour, _min, sec);
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 00C2     LCD_String(buf);
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 00C3 }
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;
;// Editting 커서 표시
;void edit_cursor(void)
; 0000 00C7 {
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 00C8     Command(BLINKON);
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 00C9     if(loc == 1) Command(EDITCURSOR);
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 00CA     if(loc == 2) Command(EDITCURSOR-1);
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 00CB     if(loc == 3) Command(EDITCURSOR-3);
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 00CC     if(loc == 4) Command(EDITCURSOR-4);
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 00CD     if(loc == 5) Command(EDITCURSOR-6);
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 00CE     if(loc == 6) Command(EDITCURSOR-7);
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 00CF }
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;
;// LCD 초기화
;void LCD_init(void)
; 0000 00D3 {
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 00D4     DDRA = 0xFF; // 포트 A 출력 설정
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 00D5     PORTA &= 0xFB; // E = 0;
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 00D6     delay_ms(15);
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 00D7     Command(0x20);
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 00D8     delay_ms(5);
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 00D9     Command(0x20);
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 00DA     delay_us(100);
;PCODE: $000001B0 VOL: 0
; 0000 00DB     Command(0x20);
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 00DC     Command(FUNCSET);
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 00DD     Command(DISPON);
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 00DE     Command(ALLCLR);
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 00DF     Command(ENTMODE);
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 00E0 }
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;
;// 문자열 출력 함수
;void LCD_String(char *str)
; 0000 00E4 {
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 00E5     char *pStr=0;
; 0000 00E6     pStr = str;
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;	*str -> R18,R19
;	*pStr -> R16,R17
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 00E7     while(*pStr) Data(*pStr++);
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 00E8 }
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;
;// 인스트럭션 쓰기 함수
;void Command(unsigned char byte)
; 0000 00EC {
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 00ED     Busy();
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;	byte -> R17
;PCODE: $000001D9 VOL: 0
; 0000 00EE 
; 0000 00EF     // 인스트럭션 상위 바이트
; 0000 00F0     PORTA = (byte & 0xF0); // 데이터
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 00F1     PORTA &= 0xFE; //RS = 0;
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 00F2     PORTA &= 0xFD; //RW = 0;
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 00F3     delay_us(1);
;PCODE: $000001E1 VOL: 0
; 0000 00F4     PORTA |= 0x04; //E = 1;
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 00F5     delay_us(1);
;PCODE: $000001E4 VOL: 0
; 0000 00F6     PORTA &= 0xFB; //E = 0;
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 00F7 
; 0000 00F8     // 인스트럭션 하위 바이트
; 0000 00F9     PORTA = ((byte<<4) & 0xF0); // 데이터
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 00FA     PORTA &= 0xFE; //RS = 0;
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 00FB     PORTA &= 0xFD; //RW = 0;
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 00FC     delay_us(1);
;PCODE: $000001EF VOL: 0
; 0000 00FD     PORTA |= 0x04; //E = 1;
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 00FE     delay_us(1);
;PCODE: $000001F2 VOL: 0
; 0000 00FF     PORTA &= 0xFB; //E = 0;
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 0100 }
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;
;// 데이터 쓰기 함수
;void Data(unsigned char byte)
; 0000 0104 {
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 0105     Busy();
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;	byte -> R17
;PCODE: $000001FC VOL: 0
; 0000 0106 
; 0000 0107     // 데이터 상위 바이트
; 0000 0108     PORTA = (byte & 0xF0); // 데이터
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 0109     PORTA |= 0x01; //RS = 1;
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 010A     PORTA &= 0xFD; //RW = 0;
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 010B     delay_us(1);
;PCODE: $00000204 VOL: 0
; 0000 010C     PORTA |= 0x04; //E = 1;
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 010D     delay_us(1);
;PCODE: $00000207 VOL: 0
; 0000 010E     PORTA &= 0xFB; //E = 0;
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 010F     // 데이터 하위 바이트
; 0000 0110     PORTA = ((byte<<4) & 0xF0); // 데이터
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 0111     PORTA |= 0x01; //RS = 1;
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 0112     PORTA &= 0xFD; //RW = 0;
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 0113     delay_us(1);
;PCODE: $00000212 VOL: 0
; 0000 0114     PORTA |= 0x04; //E = 1;
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 0115     delay_us(1);
;PCODE: $00000215 VOL: 0
; 0000 0116     PORTA &= 0xFB; //E = 0;
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 0117 }
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;
;// Busy Flag Check -> 일반적인 BF를 체크하는 것이 아니라
;// 일정한 시간 지연을 이용한다.
;void Busy(void)
; 0000 011C {
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 011D     delay_ms(2);
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 011E }
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
